# Node Problem Detector Helm Chart Values
# Based on: https://github.com/kubernetes/node-problem-detector

# Enable the node-problem-detector
enabled: true
# Image configuration
image:
  repository: registry.k8s.io/node-problem-detector
  tag: "v0.9.0"
  pullPolicy: IfNotPresent
# Service account configuration
serviceAccount:
  create: true
  name: "node-problem-detector"
  annotations: {}
# RBAC configuration
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["nodes"]
      verbs: ["get", "list", "watch", "update", "patch"]
    - apiGroups: [""]
      resources: ["events"]
      verbs: ["create", "patch"]
    - apiGroups: [""]
      resources: ["pods"]
      verbs: ["get", "list", "watch", "delete"]
    - apiGroups: [""]
      resources: ["persistentvolumeclaims"]
      verbs: ["get", "list", "watch", "delete"]
    - apiGroups: ["batch"]
      resources: ["jobs"]
      verbs: ["get", "list", "watch", "delete"]
# DaemonSet configuration
daemonSet:
  # Node selector
  nodeSelector: {}
  # Tolerations for control plane nodes
  tolerations:
    - key: node-role.kubernetes.io/control-plane
      operator: Exists
      effect: NoSchedule
    - key: node-role.kubernetes.io/master
      operator: Exists
      effect: NoSchedule
  # Security context
  securityContext:
    privileged: true
    allowPrivilegeEscalation: true
    capabilities:
      add:
        - SYS_ADMIN
        - SYS_PTRACE
  # Resource limits
  resources:
    requests:
      cpu: "50m"
      memory: "50Mi"
    limits:
      cpu: "200m"
      memory: "200Mi"
  # Volume mounts for Talos
  volumeMounts:
    - name: log
      mountPath: /var/log
      readOnly: true
    - name: localtime
      mountPath: /etc/localtime
      readOnly: true
    - name: talos-config
      mountPath: /etc/talos
      readOnly: true
    - name: talos-state
      mountPath: /var/lib/talos
      readOnly: true
  # Volumes for Talos
  volumes:
    - name: log
      hostPath:
        path: /var/log
    - name: localtime
      hostPath:
        path: /etc/localtime
    - name: talos-config
      hostPath:
        path: /etc/talos
    - name: talos-state
      hostPath:
        path: /var/lib/talos
# Configuration for different monitors
config:
  # Kernel monitor configuration
  kernelMonitor:
    enabled: true
    logPath: /var/log/journal
    lookback: "5m"
    bufferSize: 10
    rules:
      - type: "temporary"
        reason: "OOMKilling"
        pattern: "Killed process .+ \\(.+\\).*"
      - type: "temporary"
        reason: "TaskHung"
        pattern: "task .+ blocked for more than .+ seconds"
      - type: "permanent"
        reason: "KernelDeadlock"
        pattern: "kernel:possible deadlock in .+"
  # Docker monitor configuration
  dockerMonitor:
    enabled: true
    logPath: /var/log/journal
    lookback: "5m"
    bufferSize: 10
    rules:
      - type: "temporary"
        reason: "DockerHung"
        pattern: "docker daemon is not responding"
  # System stats monitor
  systemStatsMonitor:
    enabled: true
    metricsPort: 20257
  # Custom plugin monitor
  customPluginMonitor:
    enabled: true
    plugins:
      - name: "talos-disk-pressure"
        path: "/custom-plugins/talos-disk-pressure-monitor.sh"
        timeout: "60s"
      - name: "talos-memory-pressure"
        path: "/custom-plugins/talos-memory-pressure-monitor.sh"
        timeout: "60s"
      - name: "talos-system-monitor"
        path: "/custom-plugins/talos-system-monitor.sh"
        timeout: "120s"
# Service configuration
service:
  enabled: true
  type: ClusterIP
  port: 20256
  targetPort: 20256
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "20257"
    prometheus.io/path: "/metrics"
# Prometheus ServiceMonitor
serviceMonitor:
  enabled: true
  interval: "30s"
  scrapeTimeout: "10s"
  path: "/metrics"
  port: "metrics"
# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "20257"
  prometheus.io/path: "/metrics"
# Pod labels
podLabels:
  app.kubernetes.io/name: node-problem-detector
  app.kubernetes.io/component: monitoring
  app.kubernetes.io/part-of: monitoring-stack
# Custom scripts for Talos monitoring
customScripts:
  talos-disk-pressure-monitor.sh: |
    #!/bin/bash
    # Monitor disk pressure on Talos nodes
    NODE_NAME="$1"

    # Check disk usage on Talos
    DISK_USAGE=$(df /var/lib/talos | tail -1 | awk '{print $5}' | sed 's/%//')

    if [ "$DISK_USAGE" -gt 85 ]; then
      echo "WARNING: High disk usage on $NODE_NAME: ${DISK_USAGE}%"
      kubectl create event --type=Warning --reason=DiskPressure --message="Disk usage is ${DISK_USAGE}% on node $NODE_NAME" --field-selector involvedObject.name=$NODE_NAME 2>/dev/null || true
    fi

    if [ "$DISK_USAGE" -gt 90 ]; then
      echo "CRITICAL: Critical disk usage on $NODE_NAME: ${DISK_USAGE}%"
      kubectl create event --type=Warning --reason=DiskPressure --message="Critical disk usage ${DISK_USAGE}% on node $NODE_NAME" --field-selector involvedObject.name=$NODE_NAME 2>/dev/null || true
    fi
  talos-memory-pressure-monitor.sh: |
    #!/bin/bash
    # Monitor memory pressure on Talos nodes
    NODE_NAME="$1"

    # Get memory usage
    MEMORY_USAGE=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')

    if [ "$MEMORY_USAGE" -gt 85 ]; then
      echo "WARNING: High memory usage on $NODE_NAME: ${MEMORY_USAGE}%"
      kubectl create event --type=Warning --reason=MemoryPressure --message="Memory usage is ${MEMORY_USAGE}% on node $NODE_NAME" --field-selector involvedObject.name=$NODE_NAME 2>/dev/null || true
    fi

    if [ "$MEMORY_USAGE" -gt 90 ]; then
      echo "CRITICAL: Critical memory usage on $NODE_NAME: ${MEMORY_USAGE}%"
      kubectl create event --type=Warning --reason=MemoryPressure --message="Critical memory usage ${MEMORY_USAGE}% on node $NODE_NAME" --field-selector involvedObject.name=$NODE_NAME 2>/dev/null || true
    fi
  talos-system-monitor.sh: "#!/bin/bash\n# Monitor Talos system health\nNODE_NAME=\"$1\"\n\n# Check Talos service status\nif ! systemctl is-active --quiet talos; then\n  echo \"WARNING: Talos service is not running on $NODE_NAME\"\n  kubectl create event --type=Warning --reason=TalosServiceDown --message=\"Talos service is not running on node $NODE_NAME\" --field-selector involvedObject.name=$NODE_NAME 2>/dev/null || true\nfi\n\n# Check for kernel issues\nif dmesg | grep -q \"kernel panic\\|segfault\\|oops\"; then\n  echo \"CRITICAL: Kernel issues detected on $NODE_NAME\"\n  kubectl create event --type=Warning --reason=KernelIssue --message=\"Kernel issues detected on node $NODE_NAME\" --field-selector involvedObject.name=$NODE_NAME 2>/dev/null || true\nfi "
